// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  email     String    @unique
  active    Int?      @default(1)
  profileId Int
  profile   Profile   @relation(fields: [profileId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
  Debt      Debt[]
}

model Profile {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  active      Int?          @default(1)
  users       User[]
  roles       ProfileRole[]
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  active      Int?          @default(1)
  profiles    ProfileRole[]
}

model ProfileRole {
  id         Int      @id @default(autoincrement())
  profileId  Int
  roleId     Int
  profile    Profile  @relation(fields: [profileId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])
  assignedAt DateTime @default(now())
}

model Param {
  id     Int    @id @default(autoincrement())
  key    String @unique
  value  String
  active Int?   @default(1)
}

model Debt {
  id                    Int       @id @default(autoincrement())
  customerId            Int
  customer              User      @relation(fields: [customerId], references: [id])
  liquidationId         Int
  titleName             String?
  liquidationCode       String
  debtDate              DateTime
  shopperName           String
  identification        Int?
  courtCosts            Int?
  localCode             String
  plotId                Int
  actionLiquidationType Int
  liquidationState      Int
  year                  Int
  surcharge             Float?    @default(0)
  discount              Float?    @default(0)
  interest              Float?    @default(0)
  coercive              Float?    @default(0)
  totalAmount           Float
  createdAt             DateTime  @default(now())
  Payment               Payment[]
}

model Payment {
  id             Int             @id @default(autoincrement())
  customerId     Int
  customer       User            @relation(fields: [customerId], references: [id])
  debtId         Int
  debt           Debt            @relation(fields: [debtId], references: [id])
  cashier        Int             @default(30)
  observation    String?
  macAddressUser String?
  ipSession      String?
  paymentDate    DateTime        @default(now())
  receiptNumber  Int             @unique
  createdAt      DateTime        @default(now())
  PaymentDetail  PaymentDetail[]
}

model PaymentDetail {
  id                 Int      @id @default(autoincrement())
  paymentId          Int
  payment            Payment  @relation(fields: [paymentId], references: [id])
  bank_id            Int
  cardNumber         String   @db.VarChar
  cardExpirationDate String   @db.VarChar
  cardAuthorization  String   @db.VarChar
  cardVoucherNumber  String   @db.VarChar
  cardHolderName     String   @db.VarChar
  message            String
  createdAt          DateTime @default(now())
}
