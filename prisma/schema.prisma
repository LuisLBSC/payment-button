generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  username      String        @unique
  password      String
  email         String        @unique
  active        Int?          @default(1)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  profileId     Int
  verified      Int?          @default(0)
  verifiedToken String?
  lastname      String
  name          String
  address       String?
  country       String        @default("EC")
  middlename    String
  phone         String?       @db.VarChar(10)
  postCode      String?
  payment       Payment[]
  profile       Profile       @relation(fields: [profileId], references: [id])
  transaction   Transaction[]
}

model Profile {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  active      Int?          @default(1)
  roles       ProfileRole[]
  users       User[]
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  active      Int?          @default(1)
  profiles    ProfileRole[]
  entities    RoleEntity[]
}

model RoleEntity {
  id         Int      @id @default(autoincrement())
  roleId     Int
  role       Role     @relation(fields: [roleId], references: [id])
  entityId   Int
  entity     Entity   @relation(fields: [entityId], references: [id])
  assignedAt DateTime @default(now())
}

model ProfileRole {
  id         Int      @id @default(autoincrement())
  profileId  Int
  roleId     Int
  assignedAt DateTime @default(now())
  profile    Profile  @relation(fields: [profileId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])
}

model Param {
  id     Int    @id @default(autoincrement())
  key    String @unique
  value  String
  active Int?   @default(1)
}

model Debt {
  id                    Int       @id @default(autoincrement())
  titleName             String?
  liquidationCode       String
  debtDate              DateTime
  shopperName           String
  identification        Int?
  courtCosts            Int?
  localCode             String
  plotId                Int
  actionLiquidationType Int
  liquidationState      Int
  year                  Int
  surcharge             Float?    @default(0)
  discount              Float?    @default(0)
  interest              Float?    @default(0)
  coercive              Float?    @default(0)
  totalAmount           Float
  createdAt             DateTime  @default(now())
  liquidationId         Int
  payment               Payment[]
}

model Payment {
  id                 Int          @id @default(autoincrement())
  customerId         Int
  customer           User         @relation(fields: [customerId], references: [id])
  cashier            Int          @default(30)
  debtId             Int
  debt               Debt         @relation(fields: [debtId], references: [id])
  ipSession          String?
  macAddressUser     String?
  observation        String?
  receiptNumber      String
  bank_id            Int
  cardNumber         String       @db.VarChar
  cardExpirationDate String       @db.VarChar
  cardAuthorization  String       @db.VarChar
  cardVoucherNumber  String       @db.VarChar
  cardHolderName     String       @db.VarChar
  amount             Float
  message            String
  createdAt          DateTime     @default(now())
  transactionId      Int
  transaction        Transaction? @relation(fields: [transactionId], references: [id])
}

model Transaction {
  id             Int       @id @default(autoincrement())
  type           String?
  state          String
  order          Int       @default(autoincrement())
  executionDate  DateTime  @default(now())
  trxId          String    @unique
  bankResponse   String?
  responseText   String?
  lot            String?
  reference      String?
  acquirerId     Int
  acquirer       User      @relation(fields: [acquirerId], references: [id])
  authorization  Int
  buttonResponse String
  amount         Float
  interest       Float?    @default(0)
  totalAmount    Float
  jsonResponse   String
  payment        Payment[]
}

model Entity {
  name        String       @unique
  description String?
  active      Int?         @default(1)
  id          Int          @id @default(autoincrement())
  RoleEntity  RoleEntity[]
}
