// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User{
  id              Int         @id @default(autoincrement())
  username        String      @unique
  password        String
  email           String      @unique
  active          Int?        @default(1)
  profileId       Int
  profile         Profile     @relation(fields: [profileId], references: [id]) 
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Profile {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  description     String?
  active          Int?        @default(1)
  users           User[]
  roles           ProfileRole[]
}

model Role {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  description     String?
  active          Int?        @default(1)
  profiles        ProfileRole[]
}

model ProfileRole {
  id              Int         @id @default(autoincrement())
  profileId       Int
  roleId          Int
  profile         Profile     @relation(fields: [profileId], references: [id])
  role            Role        @relation(fields: [roleId], references: [id])
  assignedAt      DateTime    @default(now())
}

model Param {
  id              Int         @id @default(autoincrement())
  key             String      @unique
  value           String
  active          Int?        @default(1)
}

model Debt {
  id              Int         @id @default(autoincrement())
  customerId      Int
  customer        User        @relation(fields: [customerId], references: [id])
  value           Float
  tax             Float?
  discount        Float?
  maxPayDate      DateTime
  createdAt       DateTime    @default(now())
}

model Payment {
  id              Int         @id @default(autoincrement())
  customerId      Int
  customer        User        @relation(fields: [customerId], references: [id])
  paymentDate     DateTime
  paymentMethod   String
  value           Float
  tax             Float?
  discount        Float?
  pinpadId        String?
  voucherNumber   String?
  invoiceNumber   String?
  ip              String?
  transactionId   Int
  debtId          Int
  debt            Debt        @relation(fields: [debtId], references: [id])
  createdAt       DateTime    @default(now())
}
