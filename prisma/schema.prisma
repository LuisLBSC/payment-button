// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  email     String    @unique
  active    Int?      @default(1)
  profileId Int
  profile   Profile   @relation(fields: [profileId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
}

model Profile {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  active      Int?          @default(1)
  users       User[]
  roles       ProfileRole[]
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  active      Int?          @default(1)
  profiles    ProfileRole[]
}

model ProfileRole {
  id         Int      @id @default(autoincrement())
  profileId  Int
  roleId     Int
  profile    Profile  @relation(fields: [profileId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])
  assignedAt DateTime @default(now())
}

model Param {
  id     Int    @id @default(autoincrement())
  key    String @unique
  value  String
  active Int?   @default(1)
}


model Debt {
  id                      Int         @id @default(autoincrement())
  customerId              Int
  customer                User        @relation(fields: [customerId], references: [id])
  title_name              String?
  liquidation_code        String
  debt_date               DateTime
  shopper_name            String
  identification          Int?
  court_costs             Int?
  local_code              String
  plot_id                 Int
  action_liquidation_type Int
  liquidation_state       Int
  year                    Int
  surcharge               Float?     @default(0) 
  discount                Float?     @default(0) 
  interest                Float?     @default(0) 
  coercive                Float?     @default(0)
  total_amount            Float
  createdAt               DateTime    @default(now())
}

model Payment {
  id                     Int      @id @default(autoincrement())
  customerId             Int
  customer               User     @relation(fields: [customerId], references: [id])
  checkout_id            String   @unique
  result_description     String?
  transaction_id         String?
  payment_type           String?
  payment_brand          String?
  amount                 Float
  merchant_transactionId Int?
  result_code            String?
  extended_description   String?
  acquirer_response      String?
  batch_no               String?
  interest               Float?
  total_amount           Float?
  reference_no           String?
  bin                    String?
  last_4_Digits          String?
  email                  String?
  shopper_mid            String?
  shopper_tid            String?
  request_json           String?
  response_json          String?
  status                 Int?
  debtId                 Int
  debt                   Debt        @relation(fields: [debtId], references: [id])
  updated_at             DateTime @default(now())
}
